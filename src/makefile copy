BUILD:= ../build
SRC:=.
BOOT:= $(SRC)/boot
KERNEL:= $(SRC)/kernel
LIB:= $(SRC)/lib
FS:= $(SRC)/fs
TESTS:= $(SRC)/tests
TARGET:=bochs

BOOT_INCLUDE:=$(SRC)/boot
INCLUDE:=$(SRC)/include
KERNEL_INCLUDE:=$(SRC)/kernel/include

BOCHS=bochs
ASM=nasm
CC=gcc
LD=ld

ENTRYPOINT:=0xC0020000

ASM_FLAGS:=-f elf

DEBUG_FLAGS:=-D ONIX_DEBUG
# DEBUG_FLAGS =

CFLAGS:= -I $(INCLUDE) -c -fno-builtin -m32 -fno-stack-protector \
		-nostdlib -nostdinc -nostartfiles -nodefaultlibs -Wall -Wextra \
		$(DEBUG_FLAGS)

LDFLAGS = -m elf_i386 -s -Ttext $(ENTRYPOINT)

.PHONY: clean image unlock win fdisk

kernel: $(BUILD)/kernel.bin
	# ps -ef | grep bochsrc-gdb | grep -v grep | awk '{print $$2}' | xargs -r kill -9
	-

$(BUILD)/%.bin: $(BOOT)/%.asm
	$(ASM) -I $(BOOT_INCLUDE) $< -o $@

# $(BUILD)/loader.bin: $(BOOT)/loader.asm
# 	$(ASM) -I $(BOOT_INCLUDE) $< -o $@

$(BUILD)/start.o: $(KERNEL)/start.asm
	$(ASM) $(ASM_FLAGS) -I $(BOOT_INCLUDE) $< -o $@

$(BUILD)/system.o: $(KERNEL)/system.asm
	$(ASM) $(ASM_FLAGS) -I $(BOOT_INCLUDE) $< -o $@

$(BUILD)/handler.o: $(KERNEL)/handler.asm
	$(ASM) $(ASM_FLAGS) -I $(BOOT_INCLUDE) $< -o $@

$(BUILD)/schedule.o: $(KERNEL)/schedule.asm
	$(ASM) $(ASM_FLAGS) -I $(BOOT_INCLUDE) $< -o $@

$(BUILD)/__syscall.o: $(LIB)/__syscall.asm
	$(ASM) $(ASM_FLAGS) -I $(BOOT_INCLUDE) $< -o $@

$(BUILD)/global.o: $(KERNEL)/global.c
	$(CC) $(CFLAGS) -I $(KERNEL_INCLUDE) $< -o $@

$(BUILD)/main.o: $(KERNEL)/main.c
	$(CC) $(CFLAGS) -I $(KERNEL_INCLUDE) $< -o $@

$(BUILD)/printk.o: $(KERNEL)/printk.c
	$(CC) $(CFLAGS) -I $(KERNEL_INCLUDE) $< -o $@

$(BUILD)/string.o: $(KERNEL)/string.c
	$(CC) $(CFLAGS) -I $(KERNEL_INCLUDE) $< -o $@

$(BUILD)/stdlib.o: $(KERNEL)/stdlib.c
	$(CC) $(CFLAGS) -I $(KERNEL_INCLUDE) $< -o $@

$(BUILD)/vsprintf.o: $(LIB)/vsprintf.c
	$(CC) $(CFLAGS) -I $(KERNEL_INCLUDE) $< -o $@

$(BUILD)/assert.o: $(KERNEL)/assert.c
	$(CC) $(CFLAGS) -I $(KERNEL_INCLUDE) $< -o $@

$(BUILD)/interrupt.o: $(KERNEL)/interrupt.c
	$(CC) $(CFLAGS) -I $(KERNEL_INCLUDE) $< -o $@

$(BUILD)/clock.o: $(KERNEL)/clock.c
	$(CC) $(CFLAGS) -I $(KERNEL_INCLUDE) $< -o $@

$(BUILD)/keyboard.o: $(KERNEL)/keyboard.c
	$(CC) $(CFLAGS) -I $(KERNEL_INCLUDE) $< -o $@

$(BUILD)/harddisk.o: $(KERNEL)/harddisk.c $(KERNEL_INCLUDE)/onix/kernel/harddisk.h
	$(CC) $(CFLAGS) -I $(KERNEL_INCLUDE) $< -o $@

$(BUILD)/bitmap.o: $(KERNEL)/bitmap.c
	$(CC) $(CFLAGS) -I $(KERNEL_INCLUDE) $< -o $@

$(BUILD)/memory.o: $(KERNEL)/memory.c
	$(CC) $(CFLAGS) -I $(KERNEL_INCLUDE) $< -o $@

$(BUILD)/arena.o: $(KERNEL)/arena.c
	$(CC) $(CFLAGS) -I $(KERNEL_INCLUDE) $< -o $@

$(BUILD)/process.o: $(KERNEL)/process.c
	$(CC) $(CFLAGS) -I $(KERNEL_INCLUDE) $< -o $@

$(BUILD)/task.o: $(KERNEL)/task.c
	$(CC) $(CFLAGS) -I $(KERNEL_INCLUDE) $< -o $@

$(BUILD)/ktask.o: $(KERNEL)/ktask.c
	$(CC) $(CFLAGS) -I $(KERNEL_INCLUDE) $< -o $@

$(BUILD)/pid.o: $(KERNEL)/pid.c
	$(CC) $(CFLAGS) -I $(KERNEL_INCLUDE) $< -o $@

$(BUILD)/mutex.o: $(KERNEL)/mutex.c
	$(CC) $(CFLAGS) -I $(KERNEL_INCLUDE) $< -o $@

$(BUILD)/queue.o: $(KERNEL)/queue.c
	$(CC) $(CFLAGS) -I $(KERNEL_INCLUDE) $< -o $@

$(BUILD)/ioqueue.o: $(KERNEL)/ioqueue.c
	$(CC) $(CFLAGS) -I $(KERNEL_INCLUDE) $< -o $@

$(BUILD)/debug.o: $(KERNEL)/debug.c
	$(CC) $(CFLAGS) -I $(KERNEL_INCLUDE) $< -o $@

$(BUILD)/ksyscall.o: $(KERNEL)/ksyscall.c
	$(CC) $(CFLAGS) -I $(KERNEL_INCLUDE) $< -o $@

$(BUILD)/syscall.o: $(LIB)/syscall.c
	$(CC) $(CFLAGS) -I $(KERNEL_INCLUDE) $< -o $@

$(BUILD)/stdio.o: $(LIB)/stdio.c
	$(CC) $(CFLAGS) -I $(KERNEL_INCLUDE) $< -o $@

$(BUILD)/$(TARGET)/malloc.o: $(LIB)/malloc.c
	$(CC) $(CFLAGS) -I $(KERNEL_INCLUDE) $< -o $@

$(BUILD)/fs.o: $(FS)/fs.c
	$(CC) $(CFLAGS) -I $(KERNEL_INCLUDE) $< -o $@

# $(BUILD)/test.o: $(KERNEL)/test.c
# 	$(CC) $(CFLAGS) -I $(KERNEL_INCLUDE) $< -o $@

$(BUILD)/kernel.bin: $(BUILD)/start.o \
	$(BUILD)/global.o \
	$(BUILD)/system.o \
	$(BUILD)/string.o \
	$(BUILD)/stdlib.o \
	$(BUILD)/printk.o \
	$(BUILD)/vsprintf.o \
	$(BUILD)/assert.o \
	$(BUILD)/interrupt.o \
	$(BUILD)/bitmap.o \
	$(BUILD)/memory.o \
	$(BUILD)/arena.o \
	$(BUILD)/clock.o \
	$(BUILD)/keyboard.o \
	$(BUILD)/harddisk.o \
	$(BUILD)/task.o \
	$(BUILD)/ktask.o \
	$(BUILD)/pid.o \
	$(BUILD)/queue.o \
	$(BUILD)/ioqueue.o \
	$(BUILD)/process.o \
	$(BUILD)/handler.o \
	$(BUILD)/schedule.o \
	$(BUILD)/mutex.o \
	$(BUILD)/debug.o \
	$(BUILD)/ksyscall.o \
	$(BUILD)/__syscall.o \
	$(BUILD)/syscall.o \
	$(BUILD)/stdio.o \
	$(BUILD)/malloc.o \
	$(BUILD)/fs.o \
	$(BUILD)/test.o \
	$(BUILD)/main.o
	$(LD) $(LDFLAGS) $^ -o $@

$(BUILD)/harddisk.img: $(BUILD)/boot.bin \
	$(BUILD)/loader.bin \
	$(BUILD)/kernel.bin

ifeq ("$(wildcard $(BUILD)/harddisk.img)", "")
	bximage -q -hd=16 -mode=create -sectsize=512 -imgmode=flat $@
endif
	dd if=$(BUILD)/boot.bin of=$@ bs=512 count=1 conv=notrunc
	dd if=$(BUILD)/loader.bin of=$@ bs=512 count=4 seek=2 conv=notrunc
	dd if=$(BUILD)/kernel.bin of=$@ bs=512 seek=100 count=200 conv=notrunc

$(BUILD)/slave.img: $(BUILD)/slave.sfdisk

ifeq ("$(wildcard $(BUILD)/slave.img)", "")
	bximage -q -hd=128 -mode=create -sectsize=512 -imgmode=flat $@
endif
	sfdisk $@ < $<

bochs: $(BUILD)/harddisk.img $(BUILD)/slave.img
	@rm -rf $(BUILD)/harddisk.img.lock
	@rm -rf $(BUILD)/bx_enh_dbg.ini
	cd $(BUILD) && $(BOCHS) -q  -f bochsrc

image: $(BUILD)/harddisk.img
	-

unlock:
	rm -rf $(BUILD)/*.img.lock

win:
	ssh arch "cd ~/source/github/onix/src && make image" && make unlock && \
	cd $(BUILD) && bochs -q -f bochsrc.bxrc 

clean:
	rm -rf $(BUILD)/boot.bin
	rm -rf $(BUILD)/loader.bin
	rm -rf $(BUILD)/kernel.bin
	rm -rf $(BUILD)/*.o
	rm -rf $(BUILD)/*.img*
	rm -rf $(BUILD)/test


DEBUG_OBJECTS =  $(BUILD)/$(TARGET)/malloc.o

$(BUILD)/debug: $(DEBUG_OBJECTS)

debug: $(BUILD)/debug

	-
